package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tessellator/go-sanity/sanity"
)

var _ resource.Resource = &ProjectTokenResource{}
var _ resource.ResourceWithImportState = &ProjectTokenResource{}

func NewProjectTokenResource() resource.Resource {
	return &ProjectTokenResource{}
}

type ProjectTokenResource struct {
	client *sanity.Client
}

type ProjectTokenResourceModel struct {
	Id       types.String `tfsdk:"id"`
	Project  types.String `tfsdk:"project"`
	Label    types.String `tfsdk:"label"`
	RoleName types.String `tfsdk:"role_name"`
	Key      types.String `tfsdk:"key"`
}

func (r *ProjectTokenResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_project_token"
}

func (r *ProjectTokenResource) GetSchema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return tfsdk.Schema{
		MarkdownDescription: "Provides a Sanity project token. The token key is a sensitive value that can be used to make authenticated requests against the Sanity HTTP API.",

		Attributes: map[string]tfsdk.Attribute{
			"id": {
				Computed:            true,
				MarkdownDescription: "The unique token ID generated by Sanity.",
				PlanModifiers: tfsdk.AttributePlanModifiers{
					resource.UseStateForUnknown(),
				},
				Type: types.StringType,
			},
			"project": {
				Required:            true,
				MarkdownDescription: "The project ID, which you can find at the top of the project page in Sanity.",
				Type:                types.StringType,
				PlanModifiers: tfsdk.AttributePlanModifiers{
					resource.RequiresReplace(),
				},
			},
			"label": {
				Required:            true,
				MarkdownDescription: "A descriptive label for the token.",
				PlanModifiers: tfsdk.AttributePlanModifiers{
					resource.RequiresReplace(),
				},
				Type: types.StringType,
			},
			"role_name": {
				Required:            true,
				MarkdownDescription: "The role name that indicates which permissions are assigned to the token. For a free account, valid values are `viewer`, `editor`, and `deploy-studio`.",
				PlanModifiers: tfsdk.AttributePlanModifiers{
					resource.RequiresReplace(),
				},
				Type: types.StringType,
			},
			"key": {
				Computed:            true,
				Sensitive:           true,
				MarkdownDescription: "The token value. This value can be used for making authenticated requests against the API with the permissions indicated by the role name.",
				PlanModifiers: tfsdk.AttributePlanModifiers{
					resource.UseStateForUnknown(),
				},
				Type: types.StringType,
			},
		},
	}, nil
}

func (r *ProjectTokenResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sanity.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *http.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *ProjectTokenResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *ProjectTokenResourceModel

	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	tokenResp, err := r.client.Projects.CreateProjectToken(ctx, data.Project.Value, &sanity.CreateProjectTokenRequest{
		Label:    data.Label.Value,
		RoleName: data.RoleName.Value,
	})
	if err != nil {
		resp.Diagnostics.AddError("Client Error", err.Error())
		return
	}

	data.Id = types.String{Value: tokenResp.Id}
	data.Key = types.String{Value: tokenResp.Key}

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ProjectTokenResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *ProjectTokenResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	if data.Id.Null {
		resp.Diagnostics.AddError("Entry id is null", "Entry id is null")
		return
	}
	if data.Project.Null {
		resp.Diagnostics.AddError("Project is null", "Project is null")
		return
	}

	tokens, err := r.client.Projects.ListProjectTokens(ctx, data.Project.Value)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", err.Error())
		return
	}

	var token sanity.ProjectToken
	found := false

	for _, t := range tokens {
		if t.Id == data.Id.Value {
			token = t
			found = true
			break
		}
	}
	if !found {
		resp.Diagnostics.AddError("project token not found", "project token not found")
		return
	}

	data.Label = types.String{Value: token.Label}
	// we cannot actually capture the delta on role_name because it is an
	// ephemeral value... it is only used to populate roles and is not stored as
	// part of the actual resource on Sanity's side

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ProjectTokenResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	resp.Diagnostics.AddError("Provider Error", "Update is not supported on project tokens")
}

func (r *ProjectTokenResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *ProjectTokenResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	if data.Id.Null {
		resp.Diagnostics.AddError("Entry id is null", "Entry id is null")
		return
	}
	if data.Project.Null {
		resp.Diagnostics.AddError("Project is null", "Project is null")
		return
	}

	_, err := r.client.Projects.DeleteProjectToken(ctx, data.Project.Value, data.Id.Value)

	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("entry %s could not be deleted, got error: %s", data.Id.Value, err))
		return
	}
}

func (r *ProjectTokenResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)
}
