package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/tessellator/go-sanity/sanity"
	"github.com/tessellator/terraform-provider-sanity/internal/provider/attribute_plan_modifier"
)

var _ resource.Resource = &ProjectExternalStudioHostResource{}
var _ resource.ResourceWithImportState = &ProjectExternalStudioHostResource{}

func NewProjectExternalStudioHostResource() resource.Resource {
	return &ProjectExternalStudioHostResource{}
}

type ProjectExternalStudioHostResource struct {
	client *sanity.Client
}

// ProjectExternalStudioHostResourceModel describes the resource data model.
type ProjectExternalStudioHostResourceModel struct {
	Id                  types.String `tfsdk:"id"`
	Hostname  types.String `tfsdk:"hostname"`
}

func (r *ProjectExternalStudioHostResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_project_external_studio_host"
}

func (r *ProjectExternalStudioHostResource) GetSchema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return tfsdk.Schema{
		MarkdownDescription: "Provides an external hostname for a sanity project.",

		Attributes: map[string]tfsdk.Attribute{
			"id": {
				Computed:            true,
				MarkdownDescription: "The unique token ID generated by Sanity.",
				PlanModifiers: tfsdk.AttributePlanModifiers{
					resource.UseStateForUnknown(),
				},
				Type: types.StringType,
			},
			"hostname": {
				MarkdownDescription: "The external studio host URL.",
				Optional:            true,
				Computed:            true,
				Type:                types.StringType,
				PlanModifiers: tfsdk.AttributePlanModifiers{
					resource.UseStateForUnknown(),
				},
			},
		},
	}, nil
}

func (r *ProjectExternalStudioHostResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sanity.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *http.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *ProjectExternalStudioHostResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *ProjectExternalStudioHostResourceModel

	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	requiresUpdate := !data.Hostname.Null 

	if requiresUpdate {
		updateReq := &sanity.UpdateProjectRequest{}
		if !data.Hostname.Null {
			updateReq.ExternalStudioHost = data.Hostname.Value
		}
		project, err = r.client.Projects.Update(ctx, project.Id, updateReq)
		if err != nil {
			resp.Diagnostics.AddError("Client Error", err.Error())
			return
		}
	}

	data.Id = types.String{Value: project.Id}
	data.Hostname = types.String{Value: project.Metadata["externalStudioHost"]}

	tflog.Trace(ctx, "created a sanity project", map[string]interface{}{"id": project.Id, "name": project.DisplayName})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ProjectExternalStudioHostResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *ProjectExternalStudioHostResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	if data.Id.Null {
		resp.Diagnostics.AddError("Project id is null", "Project id is null")
		return
	}

	project, err := r.client.Projects.Get(ctx, data.Id.Value)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", err.Error())
		return
	}

	data.Id = types.String{Value: project.Id}
	data.Hostname = types.String{Value: project.Metadata["externalStudioHost"]}

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ProjectExternalStudioHostResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *ProjectExternalStudioHostResourceModel

	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	if data.Id.Null {
		resp.Diagnostics.AddError("Project id is null", "Project id is null")
		return
	}

	var studioHost string
	req.State.GetAttribute(ctx, path.Root("studio_host"), &studioHost)

	requiresUpdate := !data.Hostname.Null 

	if !requiresUpdate {
		return
	}

	updateReq := &sanity.UpdateProjectRequest{}
	if !data.Hostname.Null {
		updateReq.ExternalStudioHost = data.Hostname.Value
	}
	project, err := r.client.Projects.Update(ctx, data.Id.Value, updateReq)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", err.Error())
		return
	}

	data.Id = types.String{Value: project.Id}
	data.Hostname = types.String{Value: project.Metadata["externalStudioHost"]}

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ProjectExternalStudioHostResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	resp.Diagnostics.AddError("Provider Error", "Delete is not supported on project studio hosts")
}

func (r *ProjectExternalStudioHostResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)
}
